#Instruction
#利用神经网络来对螺旋线数据进行分类
#数据来源：代码自动生成
#运行方式：直接运行
#运行结果：Test loss,Test accuracy
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap  
from numpy import *
import numpy as np

from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation
from keras.optimizers import SGD
from sklearn.cross_validation import train_test_split



fig = plt.figure() 
axes = fig.add_subplot(111)
#然后填充显示阿基米德螺线所需要的数据：
N = 5
Step =50
thetax = np.arange(0,N * np.pi,np.pi/Step)
r1 =10*(1+thetax)
x1 = r1 * np.cos(thetax)
y1 = r1 * np.sin(thetax)
x1 = x1.reshape(-1,1)
y1 = y1.reshape(-1,1)
data1 = np.hstack([x1,y1])
#plt.scatter(data1[:, 0], data1[:, 1])

x2 = r1 * np.cos(10+thetax)
y2 = r1 * np.sin(10+thetax)
x2 = x2.reshape(-1,1)
y2 = y2.reshape(-1,1)
data2 = np.hstack([x2,y2])
#plt.scatter(data2[:,0], data2[:,1])


data = np.vstack([data1,data2])
#plt.scatter(data[:,0],data[:,1])
print(len(data))
label = list(ones(N*Step))+list(0*ones(N*Step)) 
label = array(label)

x_train,x_test,y_train,y_test = train_test_split(data,label,test_size=0.3,random_state=0)



x_combined = np.vstack((x_train,x_test))
y_combined = np.hstack((y_train,y_test))

model = Sequential()
# Dense(64) is a fully-connected layer with 64 hidden units.
# in the first layer, you must specify the expected input data shape:
# here, 2-dimensional vectors.
model.add(Dense(64, activation='relu', input_dim=2))
#model.add(Dropout(0.5))
model.add(Dense(64, activation='relu'))
model.add(Dense(64, activation='relu'))
#model.add(Dropout(0.5))
model.add(Dense(1, activation='sigmoid'))

#sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
model.compile(loss='binary_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])

history = model.fit(x_train, y_train,
          epochs=1500,
          batch_size=10)
score = model.evaluate(x_test, y_test, batch_size=10)
print('Test loss:',score[0])
print('Test accuracy:',score[1])
