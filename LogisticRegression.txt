#Instruction
#数据集来源：由于Iris是很有名的数据集，sklearn已经收纳了
#运行方式：直接运行
#运行结果：可视化的分类结果

from sklearn import datasets
import numpy as np
from sklearn.cross_validation import train_test_split


import matplotlib.pyplot as plt
import numpy as np
from matplotlib.colors import ListedColormap

#plot_decision_regions为可视化函数，使得结果具有可视化效果，可直接使用
def plot_decision_regions(X,y,classifier,test_idx=None,resolution=0.02):
    #setup marker generator and color map
    markers = ('s','x','o','^','v')
    colors =('red','blue','lightgreen','gray','cyan')
    cmap = ListedColormap(colors[:len(np.unique(y))])
    #plot the decision surface
    x1_min,x1_max = X[:,0].min() - 1,X[:,0].max() + 1
    x2_min,x2_max = X[:,1].min() - 1,X[:,1].max() + 1
    xx1,xx2 = np.meshgrid(np.arange(x1_min,x1_max,resolution),np.arange(x2_min,x2_max,resolution))
    Z = classifier.predict(np.array([xx1.ravel(),xx2.ravel()]).T)
    Z = Z.reshape(xx1.shape)
    plt.contourf(xx1,xx2,Z,alpha=0.4,cmap=cmap)
    plt.xlim(xx1.min(),xx1.max())
    plt.ylim(xx2.min(),xx2.max())
    #plot class samples
    for idx,cl in enumerate(np.unique(y)):
        plt.scatter(x=X[y == cl,0],y=X[y == cl,1],alpha=0.8,c=cmap(idx),marker=markers[idx],label=cl )
    #highlight test samples
    if test_idx:
        X_test,y_test =X[test_idx,:],y[test_idx]
        plt.scatter(X_test[:,0],X_test[:,1],c='',alpha=1.0,linewidth=1,marker='o',s=55,label='test set')
            

iris = datasets.load_iris()
X = iris.data[:,[2,3]]
y = iris.target           #标签已被转换成了0,1,2
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=0)

#缩放特征，为了追求机器学习和最优化算法的最佳性能
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
sc.fit(X_train) #估算每个特征的平均值和标准差
X_train_std = sc.transform(X_train)#注意：这里用同样的参数来标准化测试集，使得测试集和训练集之间有可比性
X_test_std = sc.transform(X_test)

X_combined_std = np.vstack((X_train_std,X_test_std))
y_combined = np.hstack((y_train,y_test))

from sklearn.linear_model import LogisticRegression
lr = LogisticRegression(C=1000.0,random_state=0)
lr.fit(X_train_std,y_train)
#lr.predict_proba(X_test_std[0,:])
plot_decision_regions(X_combined_std, y_combined, classifier=lr, test_idx=range(105,150))
plt.xlabel('petal length [standardized]')
plt.ylabel('petal width [standardized]')
plt.legend(loc='upper left')
plt.show()
